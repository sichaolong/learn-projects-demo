/*
 * xkw.com Inc. Copyright (c) 2022 All Rights Reserved.
 */

package com.xkw.bcom.rocketmq.core.util;

import com.xkw.bcom.rocketmq.core.constant.XkwRocketmqConstant;
import com.xkw.bcom.rocketmq.core.exception.XkwRocketmqSqlException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.stream.Collectors;

/**
 * SqlUtils
 *
 * @author xuelingkang
 * @version 1.0
 * @date 2022年06月16日
 */
public class SqlUtil {

    private static final Logger LOGGER = LoggerFactory.getLogger(SqlUtil.class);

    private static final String CREATE_STATEMENT_ERROR = "create statement error, sql: [%s]";
    private static final String SET_VALUE_ERROR = "set value error, statement: [%s], index: [%s], value: [%s]";
    private static final String GET_VALUE_ERROR = "get value error, index: [%s]";
    private static final String ADD_BATCH_ERROR = "add batch error, statement: [%s]";
    private static final String EXECUTE_UPDATE_ERROR = "statement execute update error, statement: [%s]";
    private static final String EXECUTE_QUERY_ERROR = "statement execute query error, statement: [%s]";
    private static final String EXECUTE_BATCH_ERROR = "statement execute batch error, statement: [%s]";
    private static final String CLEAR_BATCH_ERROR = "statement clear batch error, statement: [%s]";
    private static final String GET_GENERATED_KEYS_ERROR = "get generate keys error, statement: [%s]";
    private static final String MOVE_RS_CURSOR_NEXT_ERROR = "move resultSet cursor next error";
    private static final String GET_ROWS_ERROR = "get result rows error";

    public static PreparedStatement prepareStatement(Connection connection, String sql) {
        try {
            return connection.prepareStatement(sql);
        } catch (SQLException e) {
            String message = String.format(CREATE_STATEMENT_ERROR, sql);
            throw new XkwRocketmqSqlException(message, e);
        }
    }

    public static PreparedStatement prepareStatement(Connection connection, String sql, int resultSetType,
                                                     int resultSetConcurrency) {
        try {
            return connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
        } catch (SQLException e) {
            String message = String.format(CREATE_STATEMENT_ERROR, sql);
            throw new XkwRocketmqSqlException(message, e);
        }
    }

    public static PreparedStatement prepareStatement(Connection connection, String sql, int autoGeneratedKeys) {
        try {
            return connection.prepareStatement(sql, autoGeneratedKeys);
        } catch (SQLException e) {
            String message = String.format(CREATE_STATEMENT_ERROR, sql);
            throw new XkwRocketmqSqlException(message, e);
        }
    }

    public static void setString(PreparedStatement statement, int index, String value, String defaultVal) {
        if (value == null) {
            value = defaultVal;
        }
        setString(statement, index, value);
    }

    public static void setString(PreparedStatement statement, int index, String value) {
        try {
            statement.setString(index, value);
        } catch (SQLException e) {
            String message = String.format(SET_VALUE_ERROR, statement, index, value);
            throw new XkwRocketmqSqlException(message, e);
        }
    }

    public static void setInt(PreparedStatement statement, int index, Integer value, int defaultVal) {
        if (value == null) {
            value = defaultVal;
        }
        setInt(statement, index, value);
    }

    public static void setInt(PreparedStatement statement, int index, Integer value) {
        try {
            statement.setInt(index, value);
        } catch (SQLException e) {
            String message = String.format(SET_VALUE_ERROR, statement, index, value);
            throw new XkwRocketmqSqlException(message, e);
        }
    }

    public static void setLong(PreparedStatement statement, int index, Long value, long defaultVal) {
        if (value == null) {
            value = defaultVal;
        }
        setLong(statement, index, value);
    }

    public static void setLong(PreparedStatement statement, int index, Long value) {
        try {
            statement.setLong(index, value);
        } catch (SQLException e) {
            String message = String.format(SET_VALUE_ERROR, statement, index, value);
            throw new XkwRocketmqSqlException(message, e);
        }
    }

    public static void addBatch(PreparedStatement statement) {
        try {
            statement.addBatch();
        } catch (SQLException e) {
            String message = String.format(ADD_BATCH_ERROR, statement);
            throw new XkwRocketmqSqlException(message, e);
        }
    }

    public static int executeUpdate(PreparedStatement statement) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("executeUpdate, statement: {}", statement.toString());
        }
        try {
            return statement.executeUpdate();
        } catch (SQLException e) {
            String message = String.format(EXECUTE_UPDATE_ERROR, statement);
            throw new XkwRocketmqSqlException(message, e);
        }
    }

    public static ResultSet executeQuery(PreparedStatement statement) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("executeQuery, statement: {}", statement.toString());
        }
        try {
            return statement.executeQuery();
        } catch (SQLException e) {
            String message = String.format(EXECUTE_QUERY_ERROR, statement);
            throw new XkwRocketmqSqlException(message, e);
        }
    }

    public static int[] executeBatch(PreparedStatement statement) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("executeBatch, statement: {}", statement.toString());
        }
        try {
            return statement.executeBatch();
        } catch (SQLException e) {
            String message = String.format(EXECUTE_BATCH_ERROR, statement);
            throw new XkwRocketmqSqlException(message, e);
        }
    }

    public static void clearBatch(PreparedStatement statement) {
        try {
            statement.clearBatch();
        } catch (SQLException e) {
            String message = String.format(CLEAR_BATCH_ERROR, statement);
            throw new XkwRocketmqSqlException(message, e);
        }
    }

    public static ResultSet getGeneratedKeys(PreparedStatement statement) {
        try {
            return statement.getGeneratedKeys();
        } catch (SQLException e) {
            String message = String.format(GET_GENERATED_KEYS_ERROR, statement);
            throw new XkwRocketmqSqlException(message, e);
        }
    }

    public static boolean next(ResultSet resultSet) {
        try {
            return resultSet.next();
        } catch (SQLException e) {
            throw new XkwRocketmqSqlException(MOVE_RS_CURSOR_NEXT_ERROR, e);
        }
    }

    public static long getLong(ResultSet resultSet, int index) {
        try {
            return resultSet.getLong(index);
        } catch (SQLException e) {
            String message = String.format(GET_VALUE_ERROR, index);
            throw new XkwRocketmqSqlException(message, e);
        }
    }

    public static int getInt(ResultSet resultSet, int index) {
        try {
            return resultSet.getInt(index);
        } catch (SQLException e) {
            String message = String.format(GET_VALUE_ERROR, index);
            throw new XkwRocketmqSqlException(message, e);
        }
    }

    public static String getString(ResultSet resultSet, int index) {
        try {
            return resultSet.getString(index);
        } catch (SQLException e) {
            String message = String.format(GET_VALUE_ERROR, index);
            throw new XkwRocketmqSqlException(message, e);
        }
    }

    public static int getRow(ResultSet resultSet) {
        try {
            resultSet.last();
            int row = resultSet.getRow();
            resultSet.absolute(0);
            return row;
        } catch (SQLException e) {
            throw new XkwRocketmqSqlException(GET_ROWS_ERROR, e);
        }
    }

    public static void executeBatchByIds(List<Long> ids, ExecuteBatchByIdsAction action) {
        int size = ids.size(), i = 0, j = XkwRocketmqConstant.BATCH_SIZE;

        while (i < size) {
            j = Math.min(j, size);
            List<Long> sub = ids.subList(i, j);
            String placeholder;
            if (sub.size() == XkwRocketmqConstant.BATCH_SIZE) {
                placeholder = XkwRocketmqConstant.PLACEHOLDER_BATCH;
            } else {
                placeholder = sub.stream()
                        .map(id -> XkwRocketmqConstant.PLACEHOLDER)
                        .collect(Collectors.joining(XkwRocketmqConstant.DELIMITER));
            }

            action.accept(sub, placeholder);

            i += XkwRocketmqConstant.BATCH_SIZE;
            j += XkwRocketmqConstant.BATCH_SIZE;
        }
    }

    public interface ExecuteBatchByIdsAction {
        void accept(List<Long> sub, String placeholder);
    }
}
